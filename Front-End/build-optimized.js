#!/usr/bin/env node

/**
 * Performance-Optimized Build Script
 * Tests and validates all performance optimizations
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Starting Performance-Optimized Build...\n');

// Check if required dependencies are installed
function checkDependencies() {
  console.log('üì¶ Checking dependencies...');
  
  const required = ['cssnano', 'autoprefixer'];
  const missing = [];
  
  required.forEach(dep => {
    try {
      require.resolve(dep);
    } catch (e) {
      missing.push(dep);
    }
  });
  
  if (missing.length > 0) {
    console.log(`‚ùå Missing dependencies: ${missing.join(', ')}`);
    console.log('Installing missing dependencies...');
    execSync(`npm install --save-dev ${missing.join(' ')}`, { stdio: 'inherit' });
  } else {
    console.log('‚úÖ All dependencies are installed');
  }
}

// Validate Vite configuration
function validateViteConfig() {
  console.log('\n‚öôÔ∏è  Validating Vite configuration...');
  
  try {
    const viteConfig = fs.readFileSync('vite.config.js', 'utf8');
    
    const checks = [
      { name: 'Code Splitting', pattern: 'manualChunks' },
      { name: 'Terser Minification', pattern: 'minify: \'terser\'' },
      { name: 'Build Optimization', pattern: 'chunkSizeWarningLimit' }
    ];
    
    checks.forEach(check => {
      if (viteConfig.includes(check.pattern)) {
        console.log(`‚úÖ ${check.name}: Configured`);
      } else {
        console.log(`‚ùå ${check.name}: Missing`);
      }
    });
    
  } catch (error) {
    console.log('‚ùå Error reading Vite config:', error.message);
  }
}

// Check image optimization utilities
function checkImageOptimization() {
  console.log('\nüñºÔ∏è  Checking image optimization utilities...');
  
  const files = [
    'src/utils/imageOptimization.js',
    'src/utils/performanceOptimization.js',
    'src/components/PerformanceOptimizer.jsx'
  ];
  
  files.forEach(file => {
    if (fs.existsSync(file)) {
      console.log(`‚úÖ ${file}: Found`);
    } else {
      console.log(`‚ùå ${file}: Missing`);
    }
  });
}

// Check performance optimizations in HTML
function checkHTMLOptimizations() {
  console.log('\nüåê Checking HTML optimizations...');
  
  try {
    const html = fs.readFileSync('index.html', 'utf8');
    
    const checks = [
      { name: 'Preconnect Hints', pattern: 'rel="preconnect"' },
      { name: 'DNS Prefetch', pattern: 'rel="dns-prefetch"' },
      { name: 'Critical CSS', pattern: '<style>' },
      { name: 'Performance Monitoring', pattern: 'PerformanceObserver' },
      { name: 'Image Preloading', pattern: 'rel="preload"' }
    ];
    
    checks.forEach(check => {
      if (html.includes(check.pattern)) {
        console.log(`‚úÖ ${check.name}: Found`);
      } else {
        console.log(`‚ùå ${check.name}: Missing`);
      }
    });
    
  } catch (error) {
    console.log('‚ùå Error reading HTML:', error.message);
  }
}

// Run build with performance optimizations
function runOptimizedBuild() {
  console.log('\nüî® Running optimized build...');
  
  try {
    // Clean previous build
    if (fs.existsSync('dist')) {
      console.log('üßπ Cleaning previous build...');
      fs.rmSync('dist', { recursive: true, force: true });
    }
    
    // Run build
    console.log('üì¶ Building with optimizations...');
    execSync('npm run build', { stdio: 'inherit' });
    
    console.log('‚úÖ Build completed successfully!');
    
  } catch (error) {
    console.log('‚ùå Build failed:', error.message);
    process.exit(1);
  }
}

// Analyze build output
function analyzeBuild() {
  console.log('\nüìä Analyzing build output...');
  
  if (!fs.existsSync('dist')) {
    console.log('‚ùå Build directory not found');
    return;
  }
  
  try {
    const assetsDir = path.join('dist', 'assets');
    if (fs.existsSync(assetsDir)) {
      const files = fs.readdirSync(assetsDir);
      
      console.log(`üìÅ Build assets: ${files.length} files`);
      
      // Check for chunk splitting
      const jsFiles = files.filter(f => f.endsWith('.js'));
      const cssFiles = files.filter(f => f.endsWith('.css'));
      
      console.log(`üìú JavaScript chunks: ${jsFiles.length}`);
      console.log(`üé® CSS files: ${cssFiles.length}`);
      
      // Check chunk sizes
      jsFiles.forEach(file => {
        const filePath = path.join(assetsDir, file);
        const stats = fs.statSync(filePath);
        const sizeKB = (stats.size / 1024).toFixed(2);
        console.log(`  üìÑ ${file}: ${sizeKB} KB`);
      });
      
    }
    
  } catch (error) {
    console.log('‚ùå Error analyzing build:', error.message);
  }
}

// Performance recommendations
function showRecommendations() {
  console.log('\nüí° Performance Recommendations:');
  
  const recommendations = [
    '‚úÖ Use WebP images for better compression',
    '‚úÖ Implement lazy loading for below-the-fold images',
    '‚úÖ Enable gzip compression on your server',
    '‚úÖ Use CDN for static assets',
    '‚úÖ Monitor Core Web Vitals regularly',
    '‚úÖ Implement service worker for offline caching',
    '‚úÖ Use HTTP/2 for parallel loading',
    '‚úÖ Optimize critical rendering path'
  ];
  
  recommendations.forEach(rec => console.log(rec));
}

// Main execution
async function main() {
  try {
    checkDependencies();
    validateViteConfig();
    checkImageOptimization();
    checkHTMLOptimizations();
    runOptimizedBuild();
    analyzeBuild();
    showRecommendations();
    
    console.log('\nüéâ Performance optimization build completed successfully!');
    console.log('üìà Your website should now have significantly better performance.');
    
  } catch (error) {
    console.error('‚ùå Build process failed:', error.message);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = { main }; 